<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2021-05-19T02:31:41+00:00</updated><id>/feed.xml</id><title type="html">Codebrews &amp;amp; Bytes</title><author><name>Andrew Bernard(drexler)</name></author><entry><title type="html">OpenTelemetry: Observability in Distributed Services</title><link href="/opentelemetry/" rel="alternate" type="text/html" title="OpenTelemetry: Observability in Distributed Services" /><published>2021-04-06T16:08:00+00:00</published><updated>2021-04-06T16:08:00+00:00</updated><id>/opentelemetry</id><content type="html" xml:base="/opentelemetry/">&lt;p&gt;In the past year, the platform team was tasked with setting up infrastructure and services to unify the company’s collection of disparate databases into distinct domain databases. These legacy databases served a wide array of business applications and ran on different RDBMSes. The overall objective was to eventually have a set of microservices each of which encapsulated a business concern, upon which teams could then build their applications and services. An interesting project. The challenge? It had to be done gradually without disruption to other teams’ applications. Until those legacy databases were retired, changes to any domain database needed to be streamed in realtime to them. Briefly, based on the initial requirements, we went with PostgreSQL to power the domain databases; Debezium to capture data changes in those databases’ Write Ahead Logs and forward them for targeted schema conversions with dedicated services via Kinesis.&lt;/p&gt;

&lt;p&gt;After a couple of development iterations, to gain an insight into the performance of the service that polled the WAL, the service wrapper around Debezium was instrumented using &lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt; with the generated metrics scraped by an external Prometheus cluster. Subsequently, a Grafana dashboard was setup to visualize these.  With the removal of a key requirement of maintaining the order of data changes transmitted downstream, the need for reading the WAL also changed as domain databases now each had a dedicated outbox to commit transaction summaries to. Naturally, the question became whether Debezium would still be necessary. It was not. The team would go on to prove that out by building a replacement containerized multithreaded service that polled the &lt;em&gt;Outbox&lt;/em&gt; table and sharded the changes by tenant into Kinesis. A couple of interesting things of note happened here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Implementation was in .Net Core&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The instrumentation library changed to &lt;a href=&quot;https://www.app-metrics.io/&quot;&gt;AppMetrics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The metrics dashboard was updated to visualize the newly generated data&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s quite a few changes. The curious Rustacean in me wondered how the performance of this service would compare if it was written in &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; to take advantage of the concurrent primitives and performance &lt;a href=&quot;https://tokio.rs/&quot;&gt;Tokio&lt;/a&gt; provides alongside &lt;a href=&quot;https://github.com/rusoto/rusoto&quot;&gt;Rusoto&lt;/a&gt;. Replicating it would be fairly straightforward, however, there was no avoiding the other two changes: a new language-specific metrics library and updating the dashboards all over again. How can all this be avoided, not just in this scenario but in an much wider context of rewrites of existing services but needing to preserve the existing instrumentation? Additionally, internal deliberations about the possibility of moving away from the APM vendor to an internally hosted Elastic solution was also another real factor for consideration. Incredibly, a new open source project &lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; had a lot of the answers to questions I was mulling.&lt;/p&gt;

&lt;h4 id=&quot;opentelemetry&quot;&gt;OpenTelemetry&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; is a &lt;a href=&quot;https://www.cncf.io/&quot;&gt;CNCF&lt;/a&gt; project that defines a language-neutral specification and provides a collection of APIs, SDKs for handling observability data such as logs, metrics &amp;amp; traces in a vendor-agnostic manner. This project was formed from the convergence of two competing projects- OpenTracing &amp;amp; OpenCensus and backed by major cloud providers from Google, Microsoft, Amazon and virtually all vendors in the observability space - Splunk, Elastic, Datadog, LightStep, DynaTrace, NewRelic, Logzio, HoneyComb etc. Let us explore the benefits of adopting OpenTelemetry for existing and future greenfield projects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-specification&quot;&gt;OpenTelemetry Specification&lt;/a&gt;’s language neutrality allows for implementations in different languages. Currently, as of this writing, there are implementations for some of the most widely used general purpose languages provided by OpenTelemetry’s SIGs -  Special Interest Groups: C++, .Net, Java, Javascript, Python, Go, Rust, Erlang, Ruby, PHP, Swift. These are a dedicated groups of contributors with a focus on a single language implementation. If there’s a software project using a language that is unsupported currently, chances are it will be supported in future. All this means a greater degree of flexibility when implementing software components; regardless of the language choice, instrumentation will be the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt;’s extensible architecture means that library/plugin authors can instrument their code with the API and when these artifacts are utilized in a service or application implementing the OpenTelemetry SDK, there is visibility into both the service code and third party libraries performance. Microsoft’s &lt;a href=&quot;https://dapr.io/&quot;&gt;Distributed Application Runtime&lt;/a&gt; library is an example. There are plugins for popular frameworks like Spring, Express etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; prevents vendor lock-in. The OpenTelemetry &lt;a href=&quot;https://opentelemetry.io/docs/collector/&quot;&gt;Collector&lt;/a&gt; allows for the reception, processing and exportation of telemetry data with support for different open source wire formats - Jaeger, Prometheus, Fluent Bit, W3C TraceContext format, Zipkin’s B3 headers etc. More so, with implementation of &lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter&quot;&gt;Exporters&lt;/a&gt; for different telemetry backends, switching between vendors is a breeze. For example, one can pipe their tracing data to NewRelic, Elastic, a deployed instance of Zipkin etc…and it is all a simple configuration change on the &lt;a href=&quot;https://opentelemetry.io/docs/collector/&quot;&gt;Collector&lt;/a&gt;. Think of it as instrumentation as a form of abstraction, where the destination backends for the telemetry data is abstracted away from the application/service.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/imgs/otel-collector.png&quot; alt=&quot;OpenTelemetry Collector&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With the stabilization of the &lt;a href=&quot;https://medium.com/opentelemetry/opentelemetry-specification-v1-0-0-tracing-edition-72dd08936978&quot;&gt;Tracing Specification&lt;/a&gt; and the outline of the &lt;a href=&quot;https://medium.com/opentelemetry/opentelemetry-metrics-roadmap-f4276fd070cf&quot;&gt;Metrics Roadmap&lt;/a&gt;, OpenTelemetry is shaping up to be the way to derive insights into distributed services. One library to trace, generate metrics and connect them to other telemetry data. Since it is also the &lt;a href=&quot;https://www.cncf.io/&quot;&gt;CNCF&lt;/a&gt; project to replace OpenTracing &amp;amp; OpenCensus, for service meshes like &lt;a href=&quot;https://linkerd.io/&quot;&gt;Linkerd&lt;/a&gt;, &lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; will eventually become the de-facto way of propagating telemetry data from the various services. This means an easier transition when moving from a collection of microservices to a service mesh when the complexity warrants it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/otel-demo-tracing.png&quot; alt=&quot;OpenTelemetry Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a quick demonstration of the tracing capabilities, I have a &lt;a href=&quot;https://github.com/drexler/opentelemetry-demo-tracing&quot;&gt;demo&lt;/a&gt; built to showcase:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;support for multiple languages -  chose Rust, Typescript with ExpressJS and .Net 5&lt;/li&gt;
  &lt;li&gt;tracing across different communication protocols - HTTP &amp;amp; gRPC&lt;/li&gt;
  &lt;li&gt;auto-instrumentation of services&lt;/li&gt;
  &lt;li&gt;manual instrumentation of services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust is intentionally used for two services - &lt;em&gt;Employee&lt;/em&gt; &amp;amp; &lt;em&gt;Direct Deposits&lt;/em&gt; to demonstrate manual instrumentation with synchronous and asynchronous functions as the data layer each service works with offered a sync API, in the case of &lt;a href=&quot;http://diesel.rs/&quot;&gt;Diesel&lt;/a&gt; with PostgreSQL and an async API via &lt;a href=&quot;https://www.mongodb.com/2&quot;&gt;MongoDB&lt;/a&gt;’s Rust 2.0-alpha driver. Typescript, comes along for the ride since it’s one of the languages I use server side. .Net5 is latest language iteration from Microsoft, so I had a side interest in taking a peek at its comparative performance to Rust &lt;a href=&quot;https://drexler.github.io/aws-lambda-rust/&quot;&gt;again&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;instrumentation-traces-events--tags&quot;&gt;Instrumentation, Traces, Events &amp;amp; Tags&lt;/h5&gt;
&lt;p&gt;With OpenTelemetry, one can auto-instrument code and/or apply manual instrumentation. This gives flexibility when working with legacy codebases or starting greenfield projects by allowing teams to auto-instrument applications first and then for deeper insights into areas of the code that might be of interest later on, apply the instrumentation manually.&lt;/p&gt;

&lt;p&gt;From the demo code, I instrumented the .Net5-based &lt;em&gt;Paycheck&lt;/em&gt; service as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureTracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Necessary for OpenTelemetry Collector communication since traffic is unencrypted for demo purposes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AppContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddOpenTelemetryTracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;paycheck-db-conn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAspNetCoreInstrumentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetResourceBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;paycheck-service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddOtlpExporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otelCollectorUri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEnvironmentVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OTEL_COLLECTOR_URI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://localhost:4317&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExportProcessorType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExportProcessorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otelCollectorUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, under the hood, OpenTelemetry for DotNet sets up the auto-instrumentation via &lt;em&gt;AddAspNetCoreInstrumentation()&lt;/em&gt; and uses the &lt;em&gt;System.Diagnostics.ActivitySource&lt;/em&gt; to setup a custom event sink named &lt;em&gt;paycheck-db-conn&lt;/em&gt; for handling the manual instrumentation later as seen below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PayRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPayRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivitySource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_activitySource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PayRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IMongoClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mongoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IClientSessionHandle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientSessionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mongoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientSessionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;paychecks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_activitySource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ActivitySource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;paycheck-db-conn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllPaychecksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_activitySource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetAllPaychecksAsync&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsQueryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToListAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;paychecks.count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ActivityEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Call Failure. Reason: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A trace is simply a collection of spans. In the above, we start a &lt;em&gt;child&lt;/em&gt; span of the parent span and annotate it appropriate via tags &amp;amp; events. Events represent occurences that happened at a specific time during a span’s workload. Together, the additional metadata drives quick insights when investigating problems. For example suppose we got the following api response on an attempt to load all paychecks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Server ist kaput!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;developerMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Internal Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requestId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;451b8025562676951540a00cc121af04&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the requestId (aka the global traceId) above, we see how the additional metadata which we applied to the span helps us to understand a request error as the request is propagated across different service and network boundaries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/trace-error.png&quot; alt=&quot;Trace Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/db-down.png&quot; alt=&quot;Database Trace Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, a database connectivity problem!&lt;/p&gt;

&lt;p&gt;We apply a similar pattern to both Rust-based services: &lt;em&gt;Employee&lt;/em&gt; &amp;amp; &lt;em&gt;Direct Deposit&lt;/em&gt;. Below, we pull the propagated trace context and use it to further build child spans around database calls.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;nd&quot;&gt;#[tonic::async_trait]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyEmployeeService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAllEmployeesResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_parent_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee-service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.start_with_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get_all_employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.with_span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;EmployeeDb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_client&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.get_employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAllEmployeesResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unable to load all employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, for the &lt;em&gt;Payroll&lt;/em&gt; service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Gets an employee's paychecks
 */&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;employeesRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/:employee_id/paychecks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NextFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;payroll: getEmployeePaychecks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employeeId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;traceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paycheckService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEmployeePaychecks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;employee_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employeeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paychecks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convertGrpcToHttpErrorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;developerMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getGrpcErrorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                &lt;span class=&quot;nx&quot;&gt;traceId&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;collector-deployment-pipelines--telemetry-backend-configuration&quot;&gt;Collector Deployment, Pipelines &amp;amp; Telemetry-backend Configuration&lt;/h5&gt;

&lt;p&gt;There are two modes of deploying the OpenTelemetry Collector:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;agent: where the collector instance is running on the same host as client application&lt;/li&gt;
  &lt;li&gt;gateway: where one or more collector instances run as a standalone service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Collector serves as centralized point to allow for the configuration of telemetry data reception, processing and exportation to desired telemetry backends. In our demo configuration as shown below, we pushed trace data in &lt;em&gt;batches&lt;/em&gt; that was &lt;em&gt;received&lt;/em&gt; via HTTP &amp;amp; gRPC, through a trace &lt;em&gt;pipeline&lt;/em&gt; setup to &lt;em&gt;export&lt;/em&gt; the data to the &lt;a href=&quot;https://www.jaegertracing.io/&quot;&gt;Jaeger&lt;/a&gt; and &lt;a href=&quot;https://zipkin.io/&quot;&gt;Zipkin&lt;/a&gt; instances we deployed for analysis. Although commented out, the traces could have been sent to NewRelic as well. There are many supported vendors with the Collector. This makes it easy to compare the depth of analytics that various vendors can provide given the same telemetry data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;receivers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;otlp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocols&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cors_allowed_origins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://*&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://*&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;exporters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jaeger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jaeger-all-in-one:14250&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;insecure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;zipkin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://zipkin-all-in-one:9411/api/v2/spans&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   newrelic:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     apikey: &amp;lt;&amp;lt;NEW_RELIC_INSIGHTS_KEY&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     timeout: 30s&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pipelines&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;traces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;receivers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;otlp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exporters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jaeger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zipkin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#exporters: [zipkin, jaeger, newrelic]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Through pipelines, metrics and eventually logs data will be exported through the collector thus making OpenTelemetry the one library for applications’ observability needs. Additionally, with the Collector pipelines, one can ship various telemetry data to different vendors. If desired, one can ship their metrics data to a vendor like Splunk and still use DataDog for traces and logging. OpenTelemetry opens up the possibilities…&lt;/p&gt;

&lt;h5 id=&quot;links&quot;&gt;Links&lt;/h5&gt;
&lt;p&gt;The demo code for the above can be found &lt;a href=&quot;https://github.com/drexler/opentelemetry-demo-tracing&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>dReXler</name></author><category term="git" /><category term="opentelemetry" /><category term="rust" /><summary type="html">In the past year, the platform team was tasked with setting up infrastructure and services to unify the company’s collection of disparate databases into distinct domain databases. These legacy databases served a wide array of business applications and ran on different RDBMSes. The overall objective was to eventually have a set of microservices each of which encapsulated a business concern, upon which teams could then build their applications and services. An interesting project. The challenge? It had to be done gradually without disruption to other teams’ applications. Until those legacy databases were retired, changes to any domain database needed to be streamed in realtime to them. Briefly, based on the initial requirements, we went with PostgreSQL to power the domain databases; Debezium to capture data changes in those databases’ Write Ahead Logs and forward them for targeted schema conversions with dedicated services via Kinesis. After a couple of development iterations, to gain an insight into the performance of the service that polled the WAL, the service wrapper around Debezium was instrumented using Micrometer with the generated metrics scraped by an external Prometheus cluster. Subsequently, a Grafana dashboard was setup to visualize these. With the removal of a key requirement of maintaining the order of data changes transmitted downstream, the need for reading the WAL also changed as domain databases now each had a dedicated outbox to commit transaction summaries to. Naturally, the question became whether Debezium would still be necessary. It was not. The team would go on to prove that out by building a replacement containerized multithreaded service that polled the Outbox table and sharded the changes by tenant into Kinesis. A couple of interesting things of note happened here: Implementation was in .Net Core The instrumentation library changed to AppMetrics The metrics dashboard was updated to visualize the newly generated data That’s quite a few changes. The curious Rustacean in me wondered how the performance of this service would compare if it was written in Rust to take advantage of the concurrent primitives and performance Tokio provides alongside Rusoto. Replicating it would be fairly straightforward, however, there was no avoiding the other two changes: a new language-specific metrics library and updating the dashboards all over again. How can all this be avoided, not just in this scenario but in an much wider context of rewrites of existing services but needing to preserve the existing instrumentation? Additionally, internal deliberations about the possibility of moving away from the APM vendor to an internally hosted Elastic solution was also another real factor for consideration. Incredibly, a new open source project OpenTelemetry had a lot of the answers to questions I was mulling. OpenTelemetry OpenTelemetry is a CNCF project that defines a language-neutral specification and provides a collection of APIs, SDKs for handling observability data such as logs, metrics &amp;amp; traces in a vendor-agnostic manner. This project was formed from the convergence of two competing projects- OpenTracing &amp;amp; OpenCensus and backed by major cloud providers from Google, Microsoft, Amazon and virtually all vendors in the observability space - Splunk, Elastic, Datadog, LightStep, DynaTrace, NewRelic, Logzio, HoneyComb etc. Let us explore the benefits of adopting OpenTelemetry for existing and future greenfield projects. The OpenTelemetry Specification’s language neutrality allows for implementations in different languages. Currently, as of this writing, there are implementations for some of the most widely used general purpose languages provided by OpenTelemetry’s SIGs - Special Interest Groups: C++, .Net, Java, Javascript, Python, Go, Rust, Erlang, Ruby, PHP, Swift. These are a dedicated groups of contributors with a focus on a single language implementation. If there’s a software project using a language that is unsupported currently, chances are it will be supported in future. All this means a greater degree of flexibility when implementing software components; regardless of the language choice, instrumentation will be the same. OpenTelemetry’s extensible architecture means that library/plugin authors can instrument their code with the API and when these artifacts are utilized in a service or application implementing the OpenTelemetry SDK, there is visibility into both the service code and third party libraries performance. Microsoft’s Distributed Application Runtime library is an example. There are plugins for popular frameworks like Spring, Express etc. OpenTelemetry prevents vendor lock-in. The OpenTelemetry Collector allows for the reception, processing and exportation of telemetry data with support for different open source wire formats - Jaeger, Prometheus, Fluent Bit, W3C TraceContext format, Zipkin’s B3 headers etc. More so, with implementation of Exporters for different telemetry backends, switching between vendors is a breeze. For example, one can pipe their tracing data to NewRelic, Elastic, a deployed instance of Zipkin etc…and it is all a simple configuration change on the Collector. Think of it as instrumentation as a form of abstraction, where the destination backends for the telemetry data is abstracted away from the application/service. With the stabilization of the Tracing Specification and the outline of the Metrics Roadmap, OpenTelemetry is shaping up to be the way to derive insights into distributed services. One library to trace, generate metrics and connect them to other telemetry data. Since it is also the CNCF project to replace OpenTracing &amp;amp; OpenCensus, for service meshes like Linkerd, OpenTelemetry will eventually become the de-facto way of propagating telemetry data from the various services. This means an easier transition when moving from a collection of microservices to a service mesh when the complexity warrants it. Demo</summary></entry><entry><title type="html">Git reflog to the rescue!</title><link href="/reflog-rescue/" rel="alternate" type="text/html" title="Git reflog to the rescue!" /><published>2020-07-29T16:08:00+00:00</published><updated>2020-07-29T16:08:00+00:00</updated><id>/reflog-rescue</id><content type="html" xml:base="/reflog-rescue/">&lt;p&gt;The standard development workflow utilized by my team requires rebasing of feature branches on the master branch prior to issuing a pull request and the subsequent merge. This allows us to ensure that commits are always &lt;em&gt;in order&lt;/em&gt; after a merge rather than how they are arranged when a merge strategy is employed. There are pros and cons to each approach. However, having been a heavy Git user for years I tend to favor the rebase approach. So one can imagine when for a hairy 10 minutes i lost my work entirely on a new feature branch. Pull from remote? That was useless since I had done a rebase previously and force-pushed the local branch up to the remote branch thus wiping everything there. Here’s how I got into such a state.&lt;/p&gt;

&lt;p&gt;Here’s how I got into such a state. The repository was new and had originally been created without any file. So on pushing up my feature branch for the initial review, it became the default branch. To correct this, the idea then was to create a &lt;em&gt;master&lt;/em&gt; branch from the feature branch and delete all the commits with the exception of a README file it contained. Thereafter, the feature branch will then be rebased on master as always and the PR issued against it.  What happened on the rebase was that Git seeing that all the commits were deleted essentially resolved the rebase automatically by deleting the commits I had in the feature branch. Rebase re-writes history! Being the same commit hash ids, I was left with nothing. Immediately pushing to remote after the rebase compounded the issue.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;git log -2 --oneline&lt;/code&gt; returning nothing how was I to recover days of work. Git Reflog! I knew about it but had never had the occasion to use it. For anyone reading this, invest your time in and master advanced Git commands and especially that. It’s a life(hair?) saver!  Below were my commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog 
$ git reset HEAD@{number}   //commit before rebase
$ git status
$ git reset --hard 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To summarize the above, I needed to get my local branch back to the state it was in before I rebased it. So the first two commands did that. 
Next, to be sure i had the correct files staged - &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;. Seeing all the deletions there, the obvious thing was to discard those changes thus the &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With work now restored, it was easy to push it back to remote and end on good note.&lt;/p&gt;</content><author><name>dReXler</name></author><category term="git" /><category term="general" /><summary type="html">The standard development workflow utilized by my team requires rebasing of feature branches on the master branch prior to issuing a pull request and the subsequent merge. This allows us to ensure that commits are always in order after a merge rather than how they are arranged when a merge strategy is employed. There are pros and cons to each approach. However, having been a heavy Git user for years I tend to favor the rebase approach. So one can imagine when for a hairy 10 minutes i lost my work entirely on a new feature branch. Pull from remote? That was useless since I had done a rebase previously and force-pushed the local branch up to the remote branch thus wiping everything there. Here’s how I got into such a state. Here’s how I got into such a state. The repository was new and had originally been created without any file. So on pushing up my feature branch for the initial review, it became the default branch. To correct this, the idea then was to create a master branch from the feature branch and delete all the commits with the exception of a README file it contained. Thereafter, the feature branch will then be rebased on master as always and the PR issued against it. What happened on the rebase was that Git seeing that all the commits were deleted essentially resolved the rebase automatically by deleting the commits I had in the feature branch. Rebase re-writes history! Being the same commit hash ids, I was left with nothing. Immediately pushing to remote after the rebase compounded the issue. With git log -2 --oneline returning nothing how was I to recover days of work. Git Reflog! I knew about it but had never had the occasion to use it. For anyone reading this, invest your time in and master advanced Git commands and especially that. It’s a life(hair?) saver! Below were my commands: $ git reflog $ git reset HEAD@{number} //commit before rebase $ git status $ git reset --hard To summarize the above, I needed to get my local branch back to the state it was in before I rebased it. So the first two commands did that. Next, to be sure i had the correct files staged - git status. Seeing all the deletions there, the obvious thing was to discard those changes thus the git reset --hard. With work now restored, it was easy to push it back to remote and end on good note.</summary></entry><entry><title type="html">AWS Lambda &amp;amp; Rust</title><link href="/aws-lambda-rust/" rel="alternate" type="text/html" title="AWS Lambda &amp;amp; Rust" /><published>2020-04-03T16:08:00+00:00</published><updated>2020-04-03T16:08:00+00:00</updated><id>/aws-lambda-rust</id><content type="html" xml:base="/aws-lambda-rust/">&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;
&lt;p&gt;
The HR product my previous team inherited and migrated from Azure to AWS was built using ASP.Net in VB.Net. As one can imagine, this legacy application although particularly useful is woefully inadequate when 
the modern alternatives such as single-page applications offer a smoother user experience. In order to modernize it, distinct functional parts of the application were to be
re-written with ReactJS and the resulting bundle served out from a Cloudfront-distributed S3 bucket to the application on page loads. At Asure, all new development is &lt;i&gt;Cloud&lt;/i&gt;-first. The 
earliest module re-written this way was &lt;i&gt;Direct Deposits&lt;/i&gt; whose backend was a series of lambdas utilizing node-mssql to interact with an RDS datastore. 
&lt;/p&gt;
&lt;p&gt;
Each tenant had a series of stored encrypted credentials that needed to be decoded for further calls into the other internal applications that
linked the HR application to the Payroll suite. These were decoded on the fly. To replicate this, the original VB.Net code was ported into a utility lambda in .Net Core (2.1)
from which other &lt;i&gt;Direct Deposit&lt;/i&gt;-related lambdas could call into.  Ideally, having this a lambda layer would have been nice but with the different runtimes
involved - Node &amp;amp; .Net Core, that was ruled out. 
&lt;/p&gt;

&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;p&gt;With production workloads, each lambda needing to create/update/delete an existing direct deposit needed to await the result of the call to decrypt the necesary credentials.
The associated cold start with the .Net Core-based decryptor lambda became a bottleneck to other lambdas and overall had a noticeable impact on the user experience. Here’s 
an image the latency involved:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/decrypt-lambda-unoptimized.png&quot; alt=&quot;decrypt-lambda-unoptimized&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;
&lt;p&gt;There were a few possible solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Find supporting Node libraries and fold the existing decryption functionality into the various services.&lt;/li&gt;
  &lt;li&gt;Rewrite the decryption lambda in a different runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first option looked promising, however, the nuances between this specific implementation and Node’s were a bit troublesome. The risk to breaking the existing services were also a factor. The second was limited in scope and with the alternatives available: Go &amp;amp; Rust, there was an opportunity to investigate how these languages could be leveraged to meet the performance constraints we sought as well as expand the &lt;em&gt;tools&lt;/em&gt; available to the team when it comes to performance-related problems. Since Rust is not garbage-collected and offers near native-C style performance, that won out. Admittedly, i am biased when it comes to Rust.&lt;/p&gt;

&lt;p&gt;Utilizing &lt;a href=&quot;https://github.com/rusoto/rusoto&quot;&gt;Rusoto&lt;/a&gt;, the &lt;a href=&quot;https://github.com/softprops/serverless-rust&quot;&gt;Serverless-Rust&lt;/a&gt; plugin, i canaried the Rust-equivalent version of the decryptor service. This was a non-optimized version with
the following traits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-architecture specific build&lt;/li&gt;
  &lt;li&gt;Skipped prewarming of the service investigate cold-start effects&lt;/li&gt;
  &lt;li&gt;Used synchronous IO-blocking version of &lt;a href=&quot;https://github.com/rusoto/rusoto&quot;&gt;Rusoto&lt;/a&gt;, version &lt;a href=&quot;https://docs.rs/crate/rusoto_core/0.42.0&quot;&gt;0.42&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;OpenSSL instead of Rust-TLS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result: &lt;strong&gt;7X improvement on cold starts!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/rust-decrypt-lambda-unoptimized.png&quot; alt=&quot;rust-decrypt-lambda&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-about-net-core-31&quot;&gt;What about .Net Core 3.1?&lt;/h4&gt;
&lt;p&gt;So a few days back, AWS started providing support for .Net 3.1. Would upgrading to that help with the overall cold start improvement with the decrypt service. I did rummage around with that but although there’s a noticeable improvement in the overall cold starts the .Net Core 3.1-based lambda, the unoptimized Rust version still pips it at the post.  Here’s a summary of my findings. Note, this is not perfect benchmark but rather a focused use case analysis.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Lambda Runtime&lt;/th&gt;
      &lt;th&gt;Container Type&lt;/th&gt;
      &lt;th&gt;Avg Cold Start Time(ms)&lt;/th&gt;
      &lt;th&gt;Avg Duration(ms)&lt;/th&gt;
      &lt;th&gt;Avg Memory/Invocation(MB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;.Net Core 2.1&lt;/td&gt;
      &lt;td&gt;AmazonLinux 2&lt;/td&gt;
      &lt;td&gt;4819&lt;/td&gt;
      &lt;td&gt;115&lt;/td&gt;
      &lt;td&gt;94&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Custom (Rust)&lt;/td&gt;
      &lt;td&gt;AmazonLinux&lt;/td&gt;
      &lt;td&gt;283&lt;/td&gt;
      &lt;td&gt;232&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.Net Core 3.1&lt;/td&gt;
      &lt;td&gt;AmazonLinux 2&lt;/td&gt;
      &lt;td&gt;3549&lt;/td&gt;
      &lt;td&gt;94&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Custom (Rust**)&lt;/td&gt;
      &lt;td&gt;AmazonLinux&lt;/td&gt;
      &lt;td&gt;203&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rust** : &lt;em&gt;Partially optimized (Rust TLS for Rusoto SDK, targeted architecture: x86_64-unknown-linux-musl)&lt;/em&gt;&lt;/p&gt;</content><author><name>dReXler</name></author><category term="rust" /><category term="rust" /><summary type="html">Background The HR product my previous team inherited and migrated from Azure to AWS was built using ASP.Net in VB.Net. As one can imagine, this legacy application although particularly useful is woefully inadequate when the modern alternatives such as single-page applications offer a smoother user experience. In order to modernize it, distinct functional parts of the application were to be re-written with ReactJS and the resulting bundle served out from a Cloudfront-distributed S3 bucket to the application on page loads. At Asure, all new development is Cloud-first. The earliest module re-written this way was Direct Deposits whose backend was a series of lambdas utilizing node-mssql to interact with an RDS datastore. Each tenant had a series of stored encrypted credentials that needed to be decoded for further calls into the other internal applications that linked the HR application to the Payroll suite. These were decoded on the fly. To replicate this, the original VB.Net code was ported into a utility lambda in .Net Core (2.1) from which other Direct Deposit-related lambdas could call into. Ideally, having this a lambda layer would have been nice but with the different runtimes involved - Node &amp;amp; .Net Core, that was ruled out. Problem With production workloads, each lambda needing to create/update/delete an existing direct deposit needed to await the result of the call to decrypt the necesary credentials. The associated cold start with the .Net Core-based decryptor lambda became a bottleneck to other lambdas and overall had a noticeable impact on the user experience. Here’s an image the latency involved: Solution There were a few possible solutions: Find supporting Node libraries and fold the existing decryption functionality into the various services. Rewrite the decryption lambda in a different runtime. The first option looked promising, however, the nuances between this specific implementation and Node’s were a bit troublesome. The risk to breaking the existing services were also a factor. The second was limited in scope and with the alternatives available: Go &amp;amp; Rust, there was an opportunity to investigate how these languages could be leveraged to meet the performance constraints we sought as well as expand the tools available to the team when it comes to performance-related problems. Since Rust is not garbage-collected and offers near native-C style performance, that won out. Admittedly, i am biased when it comes to Rust. Utilizing Rusoto, the Serverless-Rust plugin, i canaried the Rust-equivalent version of the decryptor service. This was a non-optimized version with the following traits: Non-architecture specific build Skipped prewarming of the service investigate cold-start effects Used synchronous IO-blocking version of Rusoto, version 0.42. OpenSSL instead of Rust-TLS The result: 7X improvement on cold starts!</summary></entry><entry><title type="html">Moving from Blogger to Github Pages</title><link href="/new-decade-new-platform/" rel="alternate" type="text/html" title="Moving from Blogger to Github Pages" /><published>2020-03-13T16:08:00+00:00</published><updated>2020-03-13T16:08:00+00:00</updated><id>/new-decade-new-platform</id><content type="html" xml:base="/new-decade-new-platform/">So it's been two years since my last update and I've generally been too preoccupied(lazy?) to update this blog. I started on Blogger back in 2009 to showcase
a side project employing Java and good ol' Adobe Air when using Flash/Flex was all the rage. Sidenote: does anyone use GWT these days? Over time, as I've invested my efforts 
mostly on Github projects - both personal and open source-related  - it became apparent that consolidating both my blog and other projects on a common platform
was the way forward. I wanted a minimalist-styled blog without too much effort; building one in React was under consideration since it's a library i work with. 
My inner geek still wanted the barebones and thus Jekyll &amp; Github Pages won out. The migration effort was fairly straightforward. 
&lt;br/&gt;

&lt;p&gt;
    Adding a new blog post simply involves the following: 
    &lt;ul&gt;
        &lt;li&gt; adding an entry to _posts folder&lt;/li&gt;
        &lt;li&gt; serving up the files to test locally: &lt;b&gt;$ bundle exec jekyll serve --trace &lt;/b&gt;&lt;/li&gt;
        &lt;li&gt; testing the rendered html for correctness:&lt;b&gt;$ bundle exec htmlproofer ./_site --disable-external&lt;/b&gt;  &lt;/li&gt;
        &lt;li&gt; pushing &amp; committing like any other cod&lt;/li&gt;
    &lt;/ul&gt;    
&lt;/p&gt;

&lt;br/&gt;

EASY PEASY LEMON SQUEEZY!</content><author><name>dReXler</name></author><category term="general" /><category term="general" /><summary type="html">So it's been two years since my last update and I've generally been too preoccupied(lazy?) to update this blog. I started on Blogger back in 2009 to showcase a side project employing Java and good ol' Adobe Air when using Flash/Flex was all the rage. Sidenote: does anyone use GWT these days? Over time, as I've invested my efforts mostly on Github projects - both personal and open source-related - it became apparent that consolidating both my blog and other projects on a common platform was the way forward. I wanted a minimalist-styled blog without too much effort; building one in React was under consideration since it's a library i work with. My inner geek still wanted the barebones and thus Jekyll &amp; Github Pages won out. The migration effort was fairly straightforward. Adding a new blog post simply involves the following: adding an entry to _posts folder serving up the files to test locally: $ bundle exec jekyll serve --trace testing the rendered html for correctness:$ bundle exec htmlproofer ./_site --disable-external pushing &amp; committing like any other cod EASY PEASY LEMON SQUEEZY!</summary></entry><entry><title type="html">Install Chrome under WSL</title><link href="/install-chrome-under-wsl/" rel="alternate" type="text/html" title="Install Chrome under WSL" /><published>2018-05-24T16:08:00+00:00</published><updated>2018-05-24T16:08:00+00:00</updated><id>/install-chrome-under-wsl</id><content type="html" xml:base="/install-chrome-under-wsl/">Even though WSL on Windows 10 is great at giving engineers a 'Nix-like environment on a Windows machine to develop, build and test; I ran into an issue where my Karma tests were failing due to the inability to find a suitable browser to execute the test suite one. I found some help online to help with installing a Chrome directly under the WSL. Below are the steps i used:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/drexler/d70ab957f964dbef1153d46bd853c775.js&quot;&gt;&lt;/script&gt;</content><author><name>dReXler</name></author><category term="WSL" /><summary type="html">Even though WSL on Windows 10 is great at giving engineers a 'Nix-like environment on a Windows machine to develop, build and test; I ran into an issue where my Karma tests were failing due to the inability to find a suitable browser to execute the test suite one. I found some help online to help with installing a Chrome directly under the WSL. Below are the steps i used:</summary></entry><entry><title type="html">Debugging on WSL: Breakpoint ignored because generated code not found(source map problem?)</title><link href="/debugging-on-wsl-breakpoint-ignored/" rel="alternate" type="text/html" title="Debugging on WSL: Breakpoint ignored because generated code not found(source map problem?)" /><published>2018-04-27T00:41:00+00:00</published><updated>2018-04-27T00:41:00+00:00</updated><id>/debugging-on-wsl-breakpoint-ignored</id><content type="html" xml:base="/debugging-on-wsl-breakpoint-ignored/">&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-dT1oOgAMqfU/WuJqlOsU6pI/AAAAAAAACNM/VkQ8PBQOoZsM4Ee5YYo2b7W8Je164svTgCEwYBhgL/s1600/untriggered-breakpoint.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;571&quot; data-original-width=&quot;1600&quot; height=&quot;228&quot; src=&quot;https://4.bp.blogspot.com/-dT1oOgAMqfU/WuJqlOsU6pI/AAAAAAAACNM/VkQ8PBQOoZsM4Ee5YYo2b7W8Je164svTgCEwYBhgL/s640/untriggered-breakpoint.PNG&quot; width=&quot;640&quot; alt=&quot;Smile&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;VSCode's support for debugging Typescript-based projects is really second to none in my opinion,&amp;nbsp; so much so that i made the switch from Atom.&amp;nbsp; Atom, though, is still is my goto editor for all my Terraform &amp;amp; other configuration-related projects.&amp;nbsp; Back to the topic at hand, debugging a React app on my Windows 10 machine with WSL enabled, my breakpoints were not triggered due to&amp;nbsp; 'missing' source maps, even though the &lt;i&gt;tsconfig.json&lt;/i&gt; had source maps generation enabled during transpilation.&amp;nbsp; I had followed the debug configuration setup described &lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/reactjs-tutorial&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Solution:&lt;/b&gt;&lt;br /&gt;It turns out that running the application/debugging under the WSL,&amp;nbsp; this extra property is needed to be added to &lt;i&gt;launch.json&lt;/i&gt; in order for the source maps to be found: &lt;i&gt;&lt;span class=&quot;pl-s&quot;&gt;sourceMapPathOverrides.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/drexler/a27e5a7f76b5fd173c7231c67d91ae05.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;i&gt;&lt;span class=&quot;pl-s&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>dReXler</name></author><category term="VSCode" /><category term="WSL" /><summary type="html">VSCode's support for debugging Typescript-based projects is really second to none in my opinion,&amp;nbsp; so much so that i made the switch from Atom.&amp;nbsp; Atom, though, is still is my goto editor for all my Terraform &amp;amp; other configuration-related projects.&amp;nbsp; Back to the topic at hand, debugging a React app on my Windows 10 machine with WSL enabled, my breakpoints were not triggered due to&amp;nbsp; 'missing' source maps, even though the tsconfig.json had source maps generation enabled during transpilation.&amp;nbsp; I had followed the debug configuration setup described here.Solution:It turns out that running the application/debugging under the WSL,&amp;nbsp; this extra property is needed to be added to launch.json in order for the source maps to be found: sourceMapPathOverrides. &amp;nbsp;</summary></entry><entry><title type="html">Infrastructure As Code - Terraform</title><link href="/infrastructure-as-code-terraform/" rel="alternate" type="text/html" title="Infrastructure As Code - Terraform" /><published>2017-04-19T11:44:00+00:00</published><updated>2017-04-19T11:44:00+00:00</updated><id>/infrastructure-as-code-terraform</id><content type="html" xml:base="/infrastructure-as-code-terraform/">Web first! Cloud first! That's the mantra at work, where the goal is to eventually move all existing apps to the cloud. Woohoo! Toss in the need for the apps to be platform-agnostic after years of being wedded to Microsoft stack and it makes for exciting times. After a quick comparison of the major cloud vendors out there in terms of richness of &amp;nbsp;offerings for what we intended, it's no surprise AWS won hands down. Prototyping by hand and running commands from the AWS CLI is okay for the trivial stuff like launching an EC2 instance or updating security groups. However, for things like CloudFormation where there was the need to launch and deal with multiple instances, the dependencies amongst themselves, correctly configured security groups based on generated IPs and manage all this within some source control; &lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot;&gt;Terraform &lt;/a&gt;was the answer. &amp;nbsp;It's incredible that it's open source meaning we have the ability to fork the code (which I have :) ) and tweak things as we see fit without waiting for the community to address them.</content><author><name>dReXler</name></author><category term="AWS" /><category term="Terraform" /><summary type="html">Web first! Cloud first! That's the mantra at work, where the goal is to eventually move all existing apps to the cloud. Woohoo! Toss in the need for the apps to be platform-agnostic after years of being wedded to Microsoft stack and it makes for exciting times. After a quick comparison of the major cloud vendors out there in terms of richness of &amp;nbsp;offerings for what we intended, it's no surprise AWS won hands down. Prototyping by hand and running commands from the AWS CLI is okay for the trivial stuff like launching an EC2 instance or updating security groups. However, for things like CloudFormation where there was the need to launch and deal with multiple instances, the dependencies amongst themselves, correctly configured security groups based on generated IPs and manage all this within some source control; Terraform was the answer. &amp;nbsp;It's incredible that it's open source meaning we have the ability to fork the code (which I have :) ) and tweak things as we see fit without waiting for the community to address them.</summary></entry><entry><title type="html">Optimized Builds with Docker</title><link href="/optimized-builds-with-docker/" rel="alternate" type="text/html" title="Optimized Builds with Docker" /><published>2017-02-20T12:12:00+00:00</published><updated>2017-02-20T12:12:00+00:00</updated><id>/optimized-builds-with-docker</id><content type="html" xml:base="/optimized-builds-with-docker/">Toying with Docker in the past, it's true power wasn't really revealed until it became a necessity on a API project due to the need to ensure that installed dependencies were the same regardless of which machine - dev or the build server itself was used. Essentially, the process was to define two Dockerfiles - one for building the .Net Core app and another for hosting only the necessary &quot;build bits&quot; from the earlier build. The former reduced the need for the Jenkins server to have all the required packages installed on it, and the latter was as an immutable tiny but fast image one could run locally or in prod. &amp;nbsp; Here's a more detailed instruction on how to do the same:&amp;nbsp;&lt;a href=&quot;https://blogs.msdn.microsoft.com/stevelasker/2016/09/29/building-optimized-docker-images-with-asp-net-core/&quot; target=&quot;_blank&quot;&gt;Building Optimized Docker Images with ASP.Net Core&lt;/a&gt;. Hats off to the guys in Redmond!</content><author><name>dReXler</name></author><category term="Docker" /><category term=".Net Core" /><summary type="html">Toying with Docker in the past, it's true power wasn't really revealed until it became a necessity on a API project due to the need to ensure that installed dependencies were the same regardless of which machine - dev or the build server itself was used. Essentially, the process was to define two Dockerfiles - one for building the .Net Core app and another for hosting only the necessary &quot;build bits&quot; from the earlier build. The former reduced the need for the Jenkins server to have all the required packages installed on it, and the latter was as an immutable tiny but fast image one could run locally or in prod. &amp;nbsp; Here's a more detailed instruction on how to do the same:&amp;nbsp;Building Optimized Docker Images with ASP.Net Core. Hats off to the guys in Redmond!</summary></entry><entry><title type="html">These aren’t the droids you’re looking for!</title><link href="/these-arent-droids-youre-looking-for/" rel="alternate" type="text/html" title="These aren’t the droids you’re looking for!" /><published>2014-08-28T02:00:00+00:00</published><updated>2014-08-28T02:00:00+00:00</updated><id>/these-arent-droids-youre-looking-for</id><content type="html" xml:base="/these-arent-droids-youre-looking-for/">For the past few days, i've spent time dipping my feet in the Android SDK and generally building baby apps to get a feel and understanding of them. This is in preparation for a larger app i'm building as part of my side projects at work so its fun all around. In the past, i've dabbled with Symbian S60 and pre- BB OS 7 but when it comes to app development the ease with which one can just get a working app installed and tested is astounding. Definitely loving it so far!&amp;nbsp;</content><author><name>dReXler</name></author><category term="Ramblings" /><summary type="html">For the past few days, i've spent time dipping my feet in the Android SDK and generally building baby apps to get a feel and understanding of them. This is in preparation for a larger app i'm building as part of my side projects at work so its fun all around. In the past, i've dabbled with Symbian S60 and pre- BB OS 7 but when it comes to app development the ease with which one can just get a working app installed and tested is astounding. Definitely loving it so far!&amp;nbsp;</summary></entry><entry><title type="html">Spring cleaning or sorts…</title><link href="/spring-cleaning-or-sorts/" rel="alternate" type="text/html" title="Spring cleaning or sorts…" /><published>2014-07-23T23:31:00+00:00</published><updated>2014-07-23T23:31:00+00:00</updated><id>/spring-cleaning-or-sorts</id><content type="html" xml:base="/spring-cleaning-or-sorts/">Finally got round to rebuilding my musty mouldy repo a couple of days back and began to check in some patches albeit easy ones just to get back in the groove. Next stop for me will be upgrading to VS2013. As usual, i need to have the best tool out there to&lt;i&gt; &lt;/i&gt;play around with although emacs &amp;amp; Eclipse will continue to be my main preference for development. What can i say? A dork gotta have his &lt;i&gt;toy. &lt;/i&gt;</content><author><name>dReXler</name></author><category term="Ramblings" /><summary type="html">Finally got round to rebuilding my musty mouldy repo a couple of days back and began to check in some patches albeit easy ones just to get back in the groove. Next stop for me will be upgrading to VS2013. As usual, i need to have the best tool out there to play around with although emacs &amp;amp; Eclipse will continue to be my main preference for development. What can i say? A dork gotta have his toy.</summary></entry></feed>